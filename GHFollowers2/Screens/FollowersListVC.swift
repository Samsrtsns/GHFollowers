//
//  FollowersListVC.swift
//  GHFollowers2
//
//  Created by Samet KATI on 14.05.2024.
//

import UIKit

class FollowersListVC: UIViewController {
    
    enum Section {case main}
    
    // KullanÄ±cÄ± adÄ±nÄ± tutan deÄŸiÅŸken
    var username: String!
    //TakipÃ§ileri tutan bir liste
    var followers : [Follower] = []
    var page = 1
    // CollectionView nesnesini tutan deÄŸiÅŸken
    var collectionView: UICollectionView!
    var hasMoreFollowers = true
    
    var dataSource: UICollectionViewDiffableDataSource<Section , Follower>!

    // View yÃ¼klendiÄŸinde Ã§alÄ±ÅŸan fonksiyon
    override func viewDidLoad() {
        super.viewDidLoad()
        configureViewController()
        configureCollectionView()
        getFollowers(username: username, page: page)
        configureDataSource()
    }
    
    // View gÃ¶rÃ¼nmeden hemen Ã¶nce Ã§alÄ±ÅŸan fonksiyon
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        // Navigation bar'Ä± gÃ¶sterir
        navigationController?.setNavigationBarHidden(false, animated: true)
    }
    
    /// ViewController iÃ§in bazÄ± Ã¶zellikleri yapÄ±landÄ±rÄ±r
    func configureViewController() {
        // View'in arka plan rengini sistem arka plan rengi yapar
        view.backgroundColor = .systemBackground
        // Navigation bar'da bÃ¼yÃ¼k baÅŸlÄ±klarÄ± tercih eder
        navigationController?.navigationBar.prefersLargeTitles = true
    }
    
    /// CollectionView nesnesi oluÅŸturup register ve genel Ã¶zelliklerini belirleyen bir fonksiyon
    func configureCollectionView() {
        // CollectionView'i oluÅŸturur ve Ã§erÃ§evesini view'in sÄ±nÄ±rlarÄ±na gÃ¶re ayarlar
        collectionView = UICollectionView(frame: view.bounds, collectionViewLayout: UIHelper.createThreeColumnFlowLayout(in: view))
        // OluÅŸturulan CollectionView'i ana view'e ekler
        view.addSubview(collectionView)
        // Collection View dinlenerek deÄŸiÅŸiklikler belirlenerek
        collectionView.delegate = self
        // CollectionView'in arka plan rengini pembe olarak ayarlar
        collectionView.backgroundColor = .systemBackground
        // CollectionView'de kullanÄ±lacak hÃ¼creyi kaydeder
        collectionView.register(FollowerCell.self, forCellWithReuseIdentifier: FollowerCell.reuseID)
    }
 
    /// TakipÃ§ileri aldÄ±ÄŸÄ±mÄ±z fonksiyon
    func getFollowers(username: String , page : Int) {
        showLoadingView()
        NetworkManager.shared.getFollowers(for: username, page: page) {[weak self] result in
            guard let self = self else { return }
            self.dismissLoadingView()
            // Sonuca gÃ¶re iÅŸlem yapar
            switch result {
                // BaÅŸarÄ±lÄ± olursa
                case .success(let followers):
                
                if followers!.count < 100 {self.hasMoreFollowers = false}
                // TakipÃ§ileri yazdÄ±rÄ±r
                self.followers.append(contentsOf: followers!)
                
                if self.followers.isEmpty {
                    let message = "This user doesn't have any followers.Go follow them ğŸ˜„. "
                    DispatchQueue.main.async {
                        self.showEmptyStateView(with: message, in: self.view )
                    }
                    return
                }
                
                self.updateData()
                //print(followers!)
                // Hata olursa
                case .failure(let error):
                    // Ana thread'de uyarÄ± gÃ¶sterir
                    self.presentGFAlertOnMainThread(title: "Bad Stuff Happend", message: error.rawValue, buttonTitle: "OK")
            }
        }
    }
    
    /// UICollectionView'unuzun veri kaynaÄŸÄ±nÄ± (data source) yapÄ±landÄ±rmak iÃ§in kullanÄ±lÄ±r. Bu fonksiyon, UICollectionViewDiffableDataSource'u ayarlayarak koleksiyon gÃ¶rÃ¼nÃ¼mÃ¼nÃ¼zÃ¼n nasÄ±l veri gÃ¶stereceÄŸini belirler.
    func configureDataSource() {
        // UICollectionViewDiffableDataSource Ã¶rneÄŸini Section ve Follower tÃ¼rleriyle oluÅŸturur
        dataSource = UICollectionViewDiffableDataSource<Section, Follower> (collectionView: collectionView, cellProvider: { (collectionView, indexPath, follower) -> UICollectionViewCell? in
            // Belirtilen hÃ¼creyi koleksiyon gÃ¶rÃ¼nÃ¼mÃ¼nden yeniden kullanmak Ã¼zere Ã§Ä±karÄ±r
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: FollowerCell.reuseID, for: indexPath) as! FollowerCell
            // HÃ¼crenin iÃ§eriÄŸini verilen Follower nesnesiyle gÃ¼nceller
            cell.set(follower: follower)
            // GÃ¼ncellenmiÅŸ hÃ¼creyi geri dÃ¶ndÃ¼rÃ¼r
            return cell
        })
    }
    
    /// veri kaynaÄŸÄ±nÄ±zÄ± gÃ¼ncellemek ve yeni verilerle koleksiyon gÃ¶rÃ¼nÃ¼mÃ¼nÃ¼zÃ¼ yeniden yÃ¼klemek iÃ§in kullanÄ±lÄ±r.
    func updateData() {
        // Yeni bir NSDiffableDataSourceSnapshot oluÅŸturur
        var snapshot = NSDiffableDataSourceSnapshot<Section, Follower>()
        
        // Snapshota 'main' adÄ±nda bir section ekler
        snapshot.appendSections([.main])
        
        // Snapshota followers adlÄ± veri kÃ¼mesini ekler
        snapshot.appendItems(followers)
        
        // Snapshot'u data source'a uygular ve animasyonlu geÃ§iÅŸlerle gÃ¶rÃ¼nÃ¼mÃ¼ gÃ¼nceller
        DispatchQueue.main.async {self.dataSource.apply(snapshot, animatingDifferences: true)}
    }
}

// MARK: Pagination

// FollowersListVC sÄ±nÄ±fÄ±nÄ±n UICollectionViewDelegate protokolÃ¼nÃ¼ uyguladÄ±ÄŸÄ± bir uzantÄ±
extension FollowersListVC: UICollectionViewDelegate {
    
    // KullanÄ±cÄ± kaydÄ±rmayÄ± bÄ±rakÄ±p, eylem tamamlandÄ±ÄŸÄ±nda Ã§aÄŸrÄ±lan fonksiyon
    func scrollViewDidEndDragging(_ scrollView: UIScrollView, willDecelerate decelerate: Bool) {
        // KaydÄ±rma iÅŸlemi tamamlandÄ±ÄŸÄ±nda scrollView'un dikey (y) eksenindeki ofsetini alÄ±r
        let offsetY = scrollView.contentOffset.y
        // Ä°Ã§erik yÃ¼ksekliÄŸini alÄ±r (tÃ¼m iÃ§erik)
        let contentHeight = scrollView.contentSize.height
        // GÃ¶rÃ¼nÃ¼r alanÄ±n (ekranÄ±n) yÃ¼ksekliÄŸini alÄ±r
        let height = scrollView.frame.size.height

        // KullanÄ±cÄ± ekranÄ±n alt kÄ±smÄ±na geldiÄŸinde bu if bloÄŸu Ã§alÄ±ÅŸÄ±r
        if offsetY > contentHeight - height {
            // Daha fazla takipÃ§i olup olmadÄ±ÄŸÄ±nÄ± kontrol eder
            guard hasMoreFollowers else { return }
            // Sayfa numarasÄ±nÄ± artÄ±rÄ±r
            page += 1
            // Yeni sayfa iÃ§in takipÃ§ileri getirir
            getFollowers(username: username, page: page)
        }
    }
}

